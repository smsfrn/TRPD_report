[["about.html", "Analyses for Three Rivers Park District Chapter 1 About 1.1 Load data 1.2 Clean data", " Analyses for Three Rivers Park District Samuel M. Safran, University of Minnesota 2023-08-02 Chapter 1 About This report compiles analyses conducted by Sam Safran for the Three Rivers Park District. 1.1 Load data Three Rivers databases and files are ingested with two scripts: Scripts/1_Data_Import.R: imports the bird and vegetation survey databases maintained by Three Rivers (.accdb format) into R. Each table in the databases is imported as its own data frame object. Scripts/2_Spatial_Data_Import.R: imports Three Rivers spatial data maintained in Three Rivers geodatabases into R. Each feature class becomes an sf data frame object. library(here) source(here(&quot;Scripts&quot;, &quot;1_Data_Import.R&quot;)) source(here(&quot;Scripts&quot;, &quot;2_Spatial_Data_Import.R&quot;)) Note: to update the files/databases used in these analyses update the file paths in the data import scripts. The data imported by 1_Data_Import.R include the following files: The data imported by 2_Spatial_Data_Import.R include the following files: 1.2 Clean data Data are further processed with a data cleaning script (Scripts/3_Data_Cleaning.R) before being fed into subsequent analyses. Cleaning steps include: Spatial burn management unit data: tidy park names; add missing year planted dates Spatial bird survey transects: tidy park names; create spatial transects for surveys that do not have spatial data MLCCS habitat types: align spelling/styling of categories across current and future layers source(here(&quot;Scripts&quot;, &quot;3_Data_Cleaning.R&quot;)) Note: many of the fixes made by cleaning script should eventually be applied to the original data files, but for now are done programatically for repeatability. "],["park-species-lists.html", "Chapter 2 Park species lists 2.1 Load data 2.2 Generate species lists 2.3 Species lists 2.4 Possibly extirpated species 2.5 TRPD lists vs. GBIF 2.6 Plots", " Chapter 2 Park species lists This document develops and presents summaries of animal species observed in Three Rivers Park District (TRPD) parks using species occurrence records from the Global Biodiversity Information Facility (GBIF). GBIF compiles data about where and when species have been recorded from a variety of sources, included museum specimens, eBird, and iNaturalist. Species lists produced by this script can:: Highlight the diversity of species supported by the publics investments in TRPD Identify species that have potentially been extirpated from TRPD parks, some of which could be candidates for reintroduction Identify gaps in the GBIF database (i.e., species known to occur in the parks but not recently documented), which can potentially help prioritize monitoring &amp; reporting efforts Identify problematic data records, which can potentially be removed in the original databases to improve future analyses for any potential data users. This version of the analysis only considers animals. 2.1 Load data Load required packages. library(tidyverse) library(ggplot2) library(sf) library(rgbif) library(here) library(CoordinateCleaner) library(sp) library(DT) 2.1.1 Load park boundaries Load park boundaries from which to compile species occurrence data. This is a manually edited version of the boundary file provided by TRPD which resolves some topology issues. It is also slightly buffered (30 m) to capture records immediately outside the legal park boundaries (e.g. records from adjacent roads). parks_sf &lt;- readRDS(here(&quot;Data&quot;, &quot;Wildlife&quot;, &quot;eBird&quot;, &quot;parks_outlines_ManualEdits_30mBufferDissolve.RDS&quot;)) %&gt;% st_transform(crs = 4326) %&gt;% select(LabelName) %&gt;% rename(Park_Name = LabelName) park_names &lt;- parks_sf$Park_Name # Not run now, but this code generates the WKT from which a spatial search is performed on the GBIF website, using the convert shape to bounding box function. # parks_sp &lt;- as_Spatial(parks_sf) # parks_wkt &lt;- sp_convert(parks_sp) # convert sp object to WKT for rgbif::occ_search geometry argument 2.1.2 Load species occurrence data The Global Biodiversity Information Facility compiles species occurrence data from many sources, including museums and participatory science platforms like eBird and iNaturalist. GBIF data queries are saved on the GBIF servers and get a unique identifier and DOI. The code below inputs a GBIF data query for all animals in the rectangular area bounding all Three Rivers parks. It then filters down the data to only records that come from within the park boundaries and pass a few basic quality filters. Information on the specific query can be found on this page. This version uses a query made on 2023-07-19. # Define where to save the filtered data. If this file already exists the script will simply load it instead of re-downloading and filtering. filtered_occ_dat_file &lt;- here(&quot;Data&quot;, &quot;Wildlife&quot;, &quot;GBIF&quot;, &quot;0101388-230530130749713_filtered.RDS&quot;) if(!file.exists(filtered_occ_dat_file)){ occurence_data_all &lt;- occ_download_get(&quot;0101388-230530130749713&quot;, path = here(&quot;Data&quot;, &quot;Wildlife&quot;, &quot;GBIF&quot;), overwrite = FALSE) %&gt;% occ_download_import() occurence_data_parks &lt;- occurence_data_all %&gt;% setNames(tolower(names(.))) # convert occurrence data to spatial features and filter to park boundaries occurence_data_parks &lt;- occurence_data_parks %&gt;% st_as_sf(coords = c(&quot;decimallongitude&quot;,&quot;decimallatitude&quot;), crs = 4326, remove = FALSE) occurence_data_parks &lt;- occurence_data_parks %&gt;% st_filter(parks_sf) # add park name each record falls within to dataframe. Doing this in a loop for each park seems to be faster than st_intersect(). parks_mp &lt;- parks_sf %&gt;% group_by(Park_Name) %&gt;% summarise(geometry = st_combine(geometry)) dat_parks_int &lt;- data.frame() for (i in 1:nrow(parks_mp)) { park_name &lt;- parks_mp$Park_Name[[i]] park&lt;-parks_mp[i,] park_dat &lt;- st_filter(occurence_data_parks,park) park_dat$Park_Name &lt;- park_name dat_parks_int &lt;- rbind(dat_parks_int, park_dat)} occurence_data_parks &lt;- dat_parks_int rm(dat_parks_int) ## Data filtering # in previous versions of this analysis I used rgbif&#39;s occ_search() to get data, which could be filter ed based on predefined issues. This doesn&#39;t seem to work with he version imported by occ_download_import(), but saving code for future reference. # Filter pre-defined GBIF issues # issues&lt;-gbif_issues() # occurence_no_issues &lt;- temp %&gt;% # occ_issues(-ccm, -cdiv, -cdout, -cdrepf, -cdreps, -cucdmis, -preneglat, -preneglon, -preswcd, -rdativ, -rdatm, -rdatunl, -txmathi, -txmatnon, -typstativ, -zerocd, -interr) # May want to add txmatfuz # occurence_data_filtered &lt;- occurence_no_issues$data # Other filters occurence_data_filtered &lt;- occurence_data_parks %&gt;% filter(!is.na(year)) %&gt;% # remove records with no year filter(!is.na(species)) %&gt;% # remove records with no species filter(species != &quot;&quot;) %&gt;% # remove records with no species filter(occurrencestatus == &quot;PRESENT&quot;) %&gt;% # only records indicating presence filter(!is.na(decimallongitude)) %&gt;% # drop records without longitude filter(!is.na(decimallatitude)) %&gt;% # drop records without latitude filter(!basisofrecord %in% c(&quot;FOSSIL_SPECIMEN&quot;,&quot;LIVING_SPECIMEN&quot;)) %&gt;% # drop fossils and &quot;living specimens&quot;, which are usually captive things filter(year &gt;= 1500) %&gt;% # remove really old records #filter(coordinateprecision &gt;= 0.1 | is.na(coordinateprecision)) %&gt;% # remove records with large coordinate uncertainty. (TK NOT WORKING) filter(coordinateuncertaintyinmeters &lt; 60000 | is.na(coordinateuncertaintyinmeters)) %&gt;% # remove records with large coordinate uncertainty. Elm Creek is largest park by area listed on Wikipedia at 21.2 km2, which as a circle would have a radius of ~5.2 km. Uncertainty must be less than this. TK make this dependent on size of actual park? filter(!coordinateuncertaintyinmeters %in% c(301,3036,999,9999)) %&gt;% # remove records with known default coordinate values filter(!decimallatitude == 0 | !decimallongitude == 0) %&gt;% # remove point plotted along the prime meridian or equator glimpse() # look at results of pipeline # remove records with certain words and phrases in certain fields problem_words_locality &lt;- &quot;\\\\bzoo\\\\b|aquarium&quot; # remove zoo (whole word) and aquarium from verbatim locality occurence_data_filtered &lt;- occurence_data_filtered %&gt;% select(-c(datasetkey, stateprovince, publishingorgkey, elevation, elevationaccuracy, depth, depthaccuracy, recordnumber, dateidentified, license, rightsholder, typestatus, establishmentmeans, mediatype)) saveRDS(occurence_data_filtered, filtered_occ_dat_file) } else { occurence_data_filtered &lt;- readRDS(filtered_occ_dat_file)} # apply manual changes to individual records # eastern blacknose dace should be western backnose dace (split) occurence_data_filtered$species[which(occurence_data_filtered$species == &quot;Rhinichthys atratulus&quot;)] &lt;- &quot;Rhinichthys obtusus&quot; 2.2 Generate species lists Here we group the raw occurrence data by species to generate species lists for the whole park system and each individual park.There is also code to add common names, and calculate the first and last year each species has was documented for the purposes of identifying possibly extirpated species. # define where to save the species list files. analysis will simply load these files if they already exist. species_summary_file &lt;- here(&quot;Results&quot;, &quot;997_species_lists&quot;, &quot;species_summary_0101388-230530130749713.RDS&quot;) # species list for whole park system species_list_parks_file &lt;- here(&quot;Results&quot;, &quot;997_species_lists&quot;, &quot;species_list_parks_0101388-230530130749713.RDS&quot;) # species lists for each park if(file.exists(species_summary_file) &amp; file.exists(species_list_parks_file)){ species_summary &lt;- readRDS(species_summary_file) species_list_parks &lt;- readRDS(species_list_parks_file) } else{ # group by species, calculate min and max year, and save taxonkeys for looking up common names species_summary&lt;-occurence_data_filtered %&gt;% group_by(phylum, class, order, family, genus, species) %&gt;% summarize(count = n(), min_year = min(year), max_year = max(year), taxonkey_all = paste(unique(taxonkey), collapse = &quot;, &quot;), taxonkey_mode = which.max(tabulate(taxonkey)), taxonkey_count = length(unique(taxonkey))) %&gt;% dplyr::arrange(phylum, class, order, desc(count)) %&gt;% ungroup() # function to determine if species has possibly been extirpated. year_high defines the cutoff year (a species first documented before that year, but not since, gets noted as possibly extirpated). year_low should almost always be set to the most recent year in the dataset. year_low can be adjusted in more complicated queries to identify species that have possibly colonized the site. assess_status &lt;- function(x, year_low, year_high){ mutate(x, status = if_else(min_year &lt;= year_low &amp; max_year &lt;= year_high, &quot;Possibly extirpated&quot;, &quot;Extant&quot;))} # set cutoff year as 2010. species_summary &lt;- assess_status(species_summary, 2023, 2010) # function for getting comon names. get_common_name &lt;- function(key){ name_dat &lt;- name_usage(key, data = &quot;vernacularNames&quot;) [[&quot;data&quot;]] if(nrow(name_dat) &gt; 0){ name_dat &lt;- name_dat %&gt;% filter(if_any(matches(&quot;language&quot;), ~.x == &quot;eng&quot;)) %&gt;% arrange(desc(if_any(matches(&quot;preferred&quot;)))) %&gt;% pull(vernacularName) %&gt;% first()} else { NA} } species_summary &lt;- species_summary %&gt;% rowwise() %&gt;% mutate(common_name = get_common_name(taxonkey_mode)) # fill in any common names that were missing because of multiple taxon keys for(i in which(is.na(species_summary$common_name) &amp; species_summary$taxonkey_count &gt;=2)){ sp &lt;- species_summary[i,] sp &lt;- unlist(str_split(sp$taxonkey_all, pattern = &quot;, &quot;)) sp &lt;- sapply(sp, get_common_name) sp &lt;- sp[which(!is.na(sp))][1] species_summary[i,14] &lt;- sp } saveRDS(species_summary, species_summary_file) # generate lists for all parks (extirpation status determined on a park-by-park basis) species_list_parks &lt;- occurence_data_filtered %&gt;% group_by(phylum, class, order, family, genus, species, Park_Name) %&gt;% summarize(count = n(), min_year = min(year), max_year = max(year)) %&gt;% dplyr::arrange(Park_Name, phylum, class, order, family, genus, species) %&gt;% ungroup() %&gt;% left_join(species_summary %&gt;% st_drop_geometry() %&gt;% select(common_name, phylum, class, order, family, genus, species)) %&gt;% assess_status(2023, 2010) saveRDS(species_list_parks, species_list_parks_file) } 2.3 Species lists 2.3.1 All parks At least 988 animal species have been documented in Three Rivers Parks. These species include 295 birds, 38 fishes, 29 mammals, 11 reptiles, and 10 amphibians, and 570 arthropods. The arthropod species include 156 butterflies/moths; 80 bees/wasps/ants/sawflies; 75 dragonflies; 71 beetles; 65 flies; 46 spiders; 36 true bugs; and 21 grasshoppers. The full list of documented species is provided below. This table can be filtered or searched to find particular taxa. 2.3.2 Individual parks This version of the table can be filtered to get the species list for any individual park. Or, an individual species can be searched to determine which parks it has been documented in. 2.4 Possibly extirpated species Here we display lists of species that have been recorded in the past, but not since 2010. Though the lack of recent records could mean the species has been extirpated, the lists should be considered on a case-by-case basis. In many cases apparent extirpation events could simply be due to a lack of recent survey effort, taxonomic issues/changes, or other data gaps. 2.4.1 All parks Species possibly extirpated from all parks: 2.4.2 Individual parks Species possibly extirpated from individual parks (Park Reserves only): 2.4.2.1 Crow-Hassan review An example review of possibly extirpated species at Crow-Hassan: Hymenoptera: At least 8 species of native bee have not been recorded in Crow-Hassan since early 90s. These include Bombus affinis (Rusty-patched Bumble Bee) and B. terricola (Yellow-banded Bumble Bee), both have which have declined precipitously across much of their range, though B. affinis perists in SE MN and B. terricola perists in northern and central MN (including near St Cloud). Two species in the genera Colletes (cellophane bees). BugGuide says of the genus: Virtually indistinguishable from some of the Andrenidae mining bees. Colletes are honey bee size, and have dramatic black and white banding on the abdomen. Some andrenids have similar markings, but are usually slightly smaller. Colletes tend to nest in dense aggregations, while andrenids are not usually as populous. C. wilmattae has very few documented records anywhere. Specializes on Dalea, including records on silky prairie clover (Dalea villosa) and a nearby St Cloud record on white prairie clover (Dalea candida). Good candidate for targeted survey? Colletes wilmattae. Photo 112308383, (c) jencorman, some rights reserved (CC BY-NC) C. susannae also known to visit Dalea spp. Note a bee documented in Crow-Hassan in July 2020 was identified by John Asher as an interesting [cellophane bee] such as C. susannae. Good candidate for targeted survey. Colletes susannae. Photo 141280564, (c) dexternienhaus, some rights reserved (CC BY-NC). Hylaeus affinis (Eastern Masked Bee) Heriades carinata (Carinate Armored-Resin Bee): very large range (much of US) Hoplitis pilosifrons (Hairy-Fronted Small-Mason) Lepidoptera: there are 2 species of moths/butterflies flagged in this analysis, but they are almost certainly not extirpated. Polites coras (Pecks Skipper): quite common in region, including a recent record just outside park boundary. Likely just overlooked or not documented. Alypia octomaculata (Eight-Spotted Forester Moth): This species has recently been documented in Crow-Hassan on iNaturalist, but the records were not made public, so they did not get passed to GBIF. Not extirpated. Odonata: 3 species last documented in GBIF 2008-2009. Epitheca spinigera (Spiny Baskettail): Not likely extirpated. Two tentative non-Research Grade records (1 &amp; 2) from Crow Hassan identified by Dan Jackson. Park biologists should review and add an additional identification to upgrade to Research Grade and allow record to be passed to GBIF. Commonly found at ponds, slow streams, and marshy lakes, this species seems to prefer slow moving acidic waters (WI Odonata Survey). Gomphurus vastus (Cobra Clubtail): Not likely extirpated. A tentative non-Research Grade record from July 2023 should be reviewed/IDd by park biologists. Gomphurus fraternus (Midland Clubtail): from Curt Oien We know there are both Gomphurus fraternus and Gomphurus externus at Crow Hassan that come out of the Crow River and that there are also Gomphurus fraternus manitobanus at Crow Hassan. Actinopterygii: 9 species of fish not recorded since 2010 or earlier. Fish underrepresented in iNaturalist. Could be worthwhile to compile/submit any recent fish surveys/data/records to fill these data gaps. Aves: 9 species of birds not recorded since 2010. Most of these species are vagrants or rare migrants. Black Tern likely the only truly extirpated species on this list. However, records of Black Tern in summer 2023including a bird carrying foodmean that the species will be removed from possibly extirpated species list next time eBird pushes data to GBIF and this analyses is rerun. 2.5 TRPD lists vs. GBIF 2.5.1 Species on TRPD lists but not in GBIF The table below lists species of mammals, herpetofauna, and fish appearing on Three Rivers species lists but that are not documented in the GBIF database. Many or most of these missing species likely do occur in the parks but have gone undocumented in the databases reporting to GBIF. TRPD Wildlife staff could consider adding records of these species to iNaturalist or directly to GBIF to help fill these data gaps. The public could also be solicited to submit documentation for these species. # source lists source(here(&quot;Scripts&quot;, &quot;TRPD_species_lists_as_dataframes.R&quot;)) # function to match species names on TRPD lists with GBIF taxonomy accepted_name &lt;- function(name){ temp &lt;- name_backbone(name) temp$species } # add GBIF accepted name to TRPD list for mammals, herps, fish mammals_data$accepted_name &lt;- sapply(mammals_data$scientific_name, accepted_name) herpetofauna_data$accepted_name &lt;- sapply(herpetofauna_data$scientific_name, accepted_name) fish_data$accepted_name &lt;- sapply(fish_data$scientific_name, accepted_name) fish_data$accepted_name &lt;- sapply(fish_data$scientific_name, accepted_name) hymenoptera_data$accepted_name &lt;- sapply(hymenoptera_data$scientific_name, accepted_name) # identify species not documented in GBIF within parks (but on TRPD species list) mammals_not_in_GBIF &lt;- setdiff(mammals_data$accepted_name, species_summary$species) mammals_not_in_GBIF &lt;- mammals_data[which(mammals_data$accepted_name %in% mammals_not_in_GBIF),] mammals_not_in_GBIF %&gt;% select(common_name, accepted_name) %&gt;% rename(&quot;common name&quot; = common_name, &quot;scientific name&quot; = accepted_name) ## common name scientific name ## 5 North American deermouse Peromyscus maniculatus ## 6 northern bog lemming Synaptomys borealis ## 8 white-footed deermouse Peromyscus leucopus ## 10 woodland jumping mouse Napaeozapus insignis ## 12 brown rat Rattus norvegicus ## 13 house mouse Mus musculus ## 22 white-tailed jackrabbit Lepus townsendii ## 23 American pygmy shrew Sorex hoyi ## 24 Arctic shrew Sorex arcticus ## 28 star-nosed mole Condylura cristata ## 29 big brown bat Eptesicus fuscus ## 30 eastern red bat Lasiurus borealis ## 31 hoary bat Aeorestes cinereus ## 33 long-eared myotis Myotis septentrionalis ## 34 silver-haired bat Lasionycteris noctivagans ## 37 gray fox Urocyon cinereoargenteus ## 39 bobcat Lynx rufus ## 40 striped skunk Mephitis mephitis ## 42 American mink Mustela vison ## 45 long-tailed weasel Mustela frenata herpetofauna_not_in_GBIF &lt;- setdiff(herpetofauna_data$accepted_name, species_summary$species) herpetofauna_not_in_GBIF &lt;- herpetofauna_data[which(herpetofauna_data$accepted_name %in% herpetofauna_not_in_GBIF),] herpetofauna_not_in_GBIF %&gt;% select(common_name, accepted_name) %&gt;% rename(&quot;common name&quot; = common_name, &quot;scientific name&quot; = accepted_name) ## common name scientific name ## 11 mudpuppy Necturus maculosus ## 12 eastern Newt Notophthalmus viridescens ## 14 common watersnake Nerodia sipedon ## 17 eastern hog-nosed snake Heterodon platirhinos ## 20 plains hog-nosed snake Heterodon nasicus ## 22 smooth greensnake Opheodrys vernalis ## 23 western foxsnake Pantherophis ramspotti ## 26 northern map turtle Graptemys geographica fish_not_in_GBIF &lt;- setdiff(fish_data$accepted_name, species_summary$species) fish_not_in_GBIF &lt;- fish_data[which(fish_data$accepted_name %in% fish_not_in_GBIF),] fish_not_in_GBIF %&gt;% select(common_name, accepted_name) %&gt;% rename(&quot;common name&quot; = common_name, &quot;scientific name&quot; = accepted_name) ## common name scientific name ## 1 American brook lamprey Lethenteron appendix ## 2 silver lamprey Ichthyomyzon unicuspis ## 3 lake sturgeon Acipenser fulvescens ## 4 shovelnose sturgeon Scaphirhynchus platorynchus ## 5 paddlefish Polyodon spathula ## 6 longnose gar Lepisosteus osseus ## 7 shortnose gar Lepisosteus platostomus ## 9 goldeye Hiodon alosoides ## 10 mooneye Hiodon tergisus ## 11 American eel Anguilla rostrata ## 12 gizzard shad Dorosoma cepedianum ## 14 blackchin shiner Notropis heterodon ## 15 blacknose shiner Notropis heterolepis ## 18 bullhead minnow Pimephales vigilax ## 20 channel shiner Notropis wickliffi ## 27 goldfish Carassius auratus ## 29 longnose dace Rhinichthys cataractae ## 30 mimic shiner Notropis volucellus ## 31 northern redbelly dace Chrosomus eos ## 32 northern pearl dace Margariscus nachtriebi ## 33 pugnose shiner Notropis anogenus ## 34 river shiner Notropis blennius ## 35 sand shiner Notropis stramineus ## 36 shoal chub Macrhybopsis hyostoma ## 37 silver chub Macrhybopsis storeriana ## 39 spottail shiner Notropis hudsonius ## 40 weed shiner Notropis texanus ## 42 bigmouth buffalo Ictiobus cyprinellus ## 43 black buffalo Ictiobus niger ## 44 blue sucker Cycleptus elongatus ## 45 golden redhorse Moxostoma erythrurum ## 46 greater redhorse Moxostoma valenciennesi ## 47 highfin carpsucker Carpiodes velifer ## 48 northern hogsucker Hypentelium nigricans ## 49 quillback Carpiodes cyprinus ## 50 river carpsucker Carpiodes carpio ## 52 silver redhorse Moxostoma anisurum ## 53 smallmouth buffalo Ictiobus bubalus ## 57 channel catfish Ictalurus punctatus ## 58 flathead catfish Pylodictis olivaris ## 59 stonecat Noturus flavus ## 62 brook trout Salvelinus fontinalis ## 63 brown trout Salmo trutta ## 64 lake herring (cisco) Coregonus artedi ## 65 rainbow trout Oncorhynchus mykiss ## 66 Trout-perch Percopsis omiscomaycus ## 70 burbot Lota lota ## 71 brook silverside Labidesthes sicculus ## 74 white bass Morone chrysops ## 79 orangespotted sunfish Lepomis humilis ## 81 river darter Percina shumardi ## 82 rock bass Ambloplites rupestris ## 86 fantail darter Etheostoma flabellare ## 89 least darter Etheostoma microperca ## 90 logperch Percina caprodes ## 91 rainbow darter Etheostoma caeruleum ## 93 slenderhead darter Percina phoxocephala ## 95 western sand darter Ammocrypta clara ## 97 freshwater drum Aplodinotus grunniens hymenoptera_not_in_GBIF &lt;- setdiff(hymenoptera_data$accepted_name, species_summary$species) hymenoptera_not_in_GBIF &lt;- hymenoptera_data[which(hymenoptera_data$accepted_name %in% hymenoptera_not_in_GBIF),] species_not_on_GBIF &lt;- rbind(mammals_not_in_GBIF, herpetofauna_not_in_GBIF, fish_not_in_GBIF) In total there are 87 species of mammals, herpetofauna, and fishes that are listed as occurring in the parks on TRPD lists that do not have any records in the GBIF database. Most of the missing mammals are small rodents, fossorial species, or nocturnal species, which are difficult to observe/document without dedicated surveys/trapping. Some small-mammal trapping has been conducted in the parks. Data from these efforts could be reviewed and submitted to a GBIF data source to improve the records. Fish are systematically underrepresented in citizen science databases like iNaturalist, which likely explains the large number of missing species in that group. The missing herpetofauna includes at least one species with documented iNaturalist records in the park (plains hog-nosed snake, Heterodon platirhinos), but since they are a sensitive species, the records are obscured and are not included in the public data download. 2.5.2 Species in GBIF but not on TRPD list In this version of the table we display species in the GBIF database that are not included on TRPD species lists maintained by the Wildlife Management Department. There are only 2 species of mammals, fish, or herpetofauna that have been documented in the parks that do not already appear on the TRPD species lists: Domestic cat (Felis catus): an introduced species. Since the mammal list maintained by TRPD contains other introduced species, it could be appropriate to also add cat. The single record of cat in this database comes from the southern edge of Murphy-Hanrehan Park. Ouachita Map Turtle (Graptemys ouachitensis): represented by a single record from Medicine Lake in French Regional Park. Almost certainly a released pet and not known to be part of a self-sustaining population. This exercise is perhaps more useful for taxonomic groups where park species lists are more uncertain or derived from general county-level datasets. For example there are approximately 38 species in the order Hymenoptera (bees/wasps/sawflies) that are not currently on the TRPD list but that have been documented in the parks on GBIF. 2.6 Plots 2.6.1 Species accumulation curves Recording of new species increased rapidly in late 2010sperhaps starting to level off in some parks. # Count new species in each year by park species_accumulation_indvidual_parks &lt;- species_list_parks %&gt;% filter(str_detect(Park_Name, &quot;Reserve&quot;)) %&gt;% group_by(Park_Name, min_year) %&gt;% summarise(n = n()) %&gt;% arrange(min_year) %&gt;% mutate(running_sp_total = cumsum(n)) # Determine the maximum value for each park for setting legend max_values &lt;- species_accumulation_indvidual_parks %&gt;% group_by(Park_Name) %&gt;% summarise(max_value = max(running_sp_total)) # Sort the Park_Name factor levels by their maximum values species_accumulation_indvidual_parks$Park_Name &lt;- factor(species_accumulation_indvidual_parks$Park_Name, levels = max_values$Park_Name[order(max_values$max_value)]) # Create plot ggplot(species_accumulation_indvidual_parks, aes(x = min_year, y = running_sp_total, group = Park_Name, color = Park_Name)) + geom_point() + geom_line() + ggthemes::theme_clean() + labs(y = &quot;Cumulative species count&quot;, x = &quot;Year&quot;) + theme(legend.position = &quot;right&quot;) + guides(color = guide_legend(reverse=TRUE)) + coord_cartesian(xlim = c(1980, 2023)) 2.6.2 Documented species richness by park Plots of total number of species by park sp_richness_plot &lt;- species_list_parks %&gt;% mutate(group = case_when( phylum %in% c(&quot;Annelida&quot;, &quot;Mollusca&quot;, &quot;Rotifera&quot;) ~ &quot;Other invertebrates&quot;, phylum == &quot;Arthropoda&quot; &amp; class %!in% c(&quot;Insecta&quot;, &quot;Arachnida&quot;) ~ &quot;Other invertebrates&quot;, class == &quot;Arachnida&quot; ~ &quot;Arachnids&quot;, class == &quot;Insecta&quot; &amp; order %!in% c(&quot;Lepidoptera&quot;, &quot;Odonata&quot;, &quot;Hymenoptera&quot;, &quot;Diptera&quot;, &quot;Coleoptera&quot;) ~ &quot;Other invertebrates&quot;, class == &quot;Insecta&quot; &amp; order %in% c(&quot;Lepidoptera&quot;, &quot;Odonata&quot;, &quot;Hymenoptera&quot;, &quot;Diptera&quot;, &quot;Coleoptera&quot;) ~ order, class %in% c(&quot;Squamata&quot;, &quot;Testudines&quot;, &quot;Amphibia&quot;) ~ &quot;Herpetofauna&quot;, TRUE ~ as.character(class))) %&gt;% mutate(group = as.factor(group)) %&gt;% mutate(group = fct_relevel(group, &quot;Arachnids&quot;,&quot;Diptera&quot;,&quot;Coleoptera&quot;,&quot;Odonata&quot;,&quot;Hymenoptera&quot;,&quot;Lepidoptera&quot;,&quot;Other invertebrates&quot;,&quot;Mammalia&quot;, &quot;Actinopterygii&quot;, &quot;Herpetofauna&quot;, &quot;Aves&quot;)) %&gt;% #filter(str_detect(Park_Name, &quot;Reserve&quot;)) %&gt;% group_by(Park_Name, group) %&gt;% summarise(n = n()) %&gt;% ggplot() + geom_bar(aes(x = reorder(Park_Name,n, sum), y = n, fill = group), position=&quot;stack&quot;, stat=&quot;identity&quot;) + ggthemes::theme_clean() + labs(y = &quot;Documented species richness&quot;, x = &quot;&quot;) + theme(legend.position = &quot;right&quot;, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + scale_x_discrete(limits = rev) sp_richness_plot Version of same plot as above, but with an indication of sampling effort. Black dots show an index of total number of bird records. Grey dots are total number of non-bird records. max_sp_park &lt;- species_list_parks %&gt;% st_drop_geometry() %&gt;% group_by(Park_Name) %&gt;% summarize(n = n()) %&gt;% pull(n) %&gt;% max() record_count &lt;- occurence_data_filtered %&gt;% st_drop_geometry() %&gt;% group_by(Park_Name) %&gt;% summarise(n = n()) record_count_nobirds &lt;- occurence_data_filtered %&gt;% filter(class != &quot;Aves&quot;) %&gt;% st_drop_geometry() %&gt;% group_by(Park_Name) %&gt;% summarise(n = n()) record_count_birds &lt;- occurence_data_filtered %&gt;% filter(class == &quot;Aves&quot;) %&gt;% st_drop_geometry() %&gt;% group_by(Park_Name) %&gt;% summarise(n = n()) sp_richness_plot + geom_point(data = record_count_birds, aes(x = Park_Name, y = n/(max(record_count_birds$n)/max_sp_park))) + geom_point(data = record_count_nobirds, aes(x = Park_Name, y = n/(max(record_count_nobirds$n)/max_sp_park)), color = &quot;grey&quot;) This shows that Crow-Hassan has high species count despite relatively low sampling effort. Murphy way more eBird use than iNat use "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
